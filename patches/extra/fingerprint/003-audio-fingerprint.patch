diff --git a/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc b/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
index e11ae9deef..973c465ace 100644
--- a/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
+++ b/third_party/blink/renderer/modules/webaudio/offline_audio_context.cc
@@ -25,9 +25,12 @@
 
 #include "third_party/blink/renderer/modules/webaudio/offline_audio_context.h"
 
+#include "base/command_line.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
+#include "base/strings/string_number_conversions.h"
 #include "media/base/audio_glitch_info.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_offline_audio_context_options.h"
@@ -45,6 +48,9 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/wtf/cross_thread_functional.h"
 
+#include <random>
+#include <ctime>
+
 namespace blink {
 
 OfflineAudioContext* OfflineAudioContext::Create(
@@ -125,18 +131,62 @@ OfflineAudioContext* OfflineAudioContext::Create(
   return offline_context;
 }
 
+
+uint32_t GetFNVHash(uint32_t val, uint32_t seed) {
+  constexpr uint32_t FNV_PRIME = 16777619u;
+  constexpr uint32_t FNV_OFFSET = 2166136261u;
+
+  uint32_t hash = FNV_OFFSET;
+  hash ^= seed;
+  hash *= FNV_PRIME;
+  hash ^= val;
+  hash *= FNV_PRIME;
+
+  return hash;
+}
+
+// 生成基于指纹的帧数调整值（1到noise_limit之间）
+uint32_t getNoiseData(uint32_t number_of_frames) {
+    // 获取命令行参数
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (command_line->HasSwitch(switches::kFingerprint)) {
+        std::string fingerprint_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+        uint32_t fingerprint;
+        if (base::StringToUint(fingerprint_str, &fingerprint)) {
+            // 使用FNV哈希算法计算哈希值
+            constexpr uint32_t SEED = 0xDEADBEEF;
+            uint32_t hash = GetFNVHash(fingerprint, SEED);
+
+            // 计算1%的number_of_frames
+            uint32_t one_percent = number_of_frames / 100;
+            if (one_percent < 1) one_percent = 1;  // 确保至少为1
+
+            // 设置最大噪声值上限
+            constexpr uint32_t MAX_NOISE = 1000;
+
+            // 取两者中的较小值作为噪声上限
+            uint32_t noise_limit = std::min(one_percent, MAX_NOISE);
+
+            // 生成1到noise_limit之间的噪声值（不包含0）
+            return (hash % noise_limit) + 1;
+        }
+    }
+    return 0;
+}
+
 OfflineAudioContext::OfflineAudioContext(LocalDOMWindow* window,
                                          unsigned number_of_channels,
                                          uint32_t number_of_frames,
                                          float sample_rate,
                                          ExceptionState& exception_state)
     : BaseAudioContext(window, kOfflineContext),
-      total_render_frames_(number_of_frames) {
+      total_render_frames_(number_of_frames + getNoiseData(number_of_frames)) {
   destination_node_ = OfflineAudioDestinationNode::Create(
-      this, number_of_channels, number_of_frames, sample_rate);
+      this, number_of_channels, total_render_frames_, sample_rate);
   Initialize();
 }
 
+
 OfflineAudioContext::~OfflineAudioContext() {
 #if DEBUG_AUDIONODE_REFERENCES
   fprintf(stderr, "[%16p]: OfflineAudioContext::~OfflineAudioContext()\n",
