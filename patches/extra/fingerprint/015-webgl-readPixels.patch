diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
index 1645e092a6..fa9df1bf2b 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -34,6 +34,7 @@
 #include <utility>
 
 #include "base/bit_cast.h"
+#include "base/command_line.h"
 #include "base/containers/contains.h"
 #include "base/feature_list.h"
 #include "base/metrics/histogram_macros.h"
@@ -41,6 +42,7 @@
 #include "base/numerics/checked_math.h"
 #include "base/synchronization/lock.h"
 #include "base/task/single_thread_task_runner.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "build/build_config.h"
 #include "device/vr/buildflags/buildflags.h"
 #include "device/vr/public/mojom/vr_service.mojom-blink-forward.h"
@@ -4939,6 +4941,192 @@ bool WebGLRenderingContextBase::ValidateReadPixelsFuncParameters(
   return true;
 }
 
+// WebGL像素数据修改函数
+namespace {
+
+void ModifyPixelData(uint8_t* data,
+                     GLsizei width,
+                     GLsizei height,
+                     GLenum format,
+                     GLenum type) {
+  // 跳过过小的图像
+  if (width < 8 || height < 8 || !data) {
+    return;
+  }
+
+  // 获取fingerprint种子
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (! command_line->HasSwitch(switches::kFingerprint)) {
+    return;
+  }
+
+  std::string seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+
+  // 确定每个像素的字节数
+  int bytes_per_pixel = 4;  // 默认为RGBA
+
+  if (format == GL_RGB) {
+    if (type == GL_UNSIGNED_BYTE) {
+      bytes_per_pixel = 3;
+    } else if (type == GL_UNSIGNED_SHORT_5_6_5) {
+      bytes_per_pixel = 2;
+    }
+  } else if (format == GL_RGBA) {
+    if (type == GL_UNSIGNED_BYTE) {
+      bytes_per_pixel = 4;
+    } else if (type == GL_UNSIGNED_SHORT_4_4_4_4 ||
+              type == GL_UNSIGNED_SHORT_5_5_5_1) {
+      bytes_per_pixel = 2;
+    }
+  } else if (format == GL_ALPHA) {
+    bytes_per_pixel = 1;
+  }
+
+  // 生成一个基于种子的哈希序列
+  std::vector<uint8_t> hash_sequence;
+  const int seq_length = 64;
+  hash_sequence.reserve(seq_length);
+
+  for (int i = 0; i < seq_length; i++) {
+    std::string hash_key = seed_str + "_seq_" + std::to_string(i);
+    uint8_t hash_val = std::hash<std::string>{}(hash_key) % 2;  // 只生成0或1
+    hash_sequence.push_back(hash_val);
+  }
+  // 全量修改所有像素
+  int total_pixels = width * height;
+
+  if (type == GL_UNSIGNED_BYTE) {
+    // 8位整数类型
+    if (format == GL_RGB || format == GL_RGBA) {
+      for (int p = 0; p < total_pixels; p++) {
+        int pixel_index = p * bytes_per_pixel;
+
+        // 计算当前像素应该使用哪个哈希值（循环使用哈希序列）
+        int seq_idx = p % seq_length;
+        uint8_t bit_val = hash_sequence[seq_idx];
+
+        // 检查是否是纯黑色或纯白色像素（这些像素不修改）
+        bool is_black = false;
+        bool is_white = false;
+        bool is_transparent = false;
+
+        if (format == GL_RGB) {
+          is_black = (data[pixel_index] == 0 && data[pixel_index+1] == 0 && data[pixel_index+2] == 0);
+          is_white = (data[pixel_index] == 255 && data[pixel_index+1] == 255 && data[pixel_index+2] == 255);
+        } else if (format == GL_RGBA) {
+          is_transparent = (data[pixel_index+3] == 0);
+          is_black = (data[pixel_index] == 0 && data[pixel_index+1] == 0 && data[pixel_index+2] == 0);
+          is_white = (data[pixel_index] == 255 && data[pixel_index+1] == 255 && data[pixel_index+2] == 255);
+        }
+
+        if (!is_black && !is_white && !is_transparent) {
+          // 修改R通道的最低位
+          data[pixel_index] = (data[pixel_index] & ~0x1) | bit_val;
+          // 修改G通道的最低位
+          data[pixel_index+1] = (data[pixel_index+1] & ~0x1) | bit_val;
+          // 修改B通道的最低位
+          data[pixel_index+2] = (data[pixel_index+2] & ~0x1) | bit_val;
+        }
+      }
+    }
+  } else if (type == GL_UNSIGNED_SHORT_5_6_5 && format == GL_RGB) {
+    // 16位RGB格式 (5-6-5)
+    for (int p = 0; p < total_pixels; p++) {
+      int pixel_index = p * bytes_per_pixel;
+      uint16_t* pixel_ptr = reinterpret_cast<uint16_t*>(data + pixel_index);
+      uint16_t pixel_value = *pixel_ptr;
+
+      // 计算当前像素应该使用哪个哈希值（循环使用哈希序列）
+      int seq_idx = p % seq_length;
+      uint8_t bit_val = hash_sequence[seq_idx];
+
+      // 提取各通道值
+      uint16_t r = (pixel_value >> 11) & 0x1F;
+      uint16_t g = (pixel_value >> 5) & 0x3F;
+      uint16_t b = pixel_value & 0x1F;
+
+      // 检查是否是纯黑色或纯白色像素（这些像素不修改）
+      bool is_black = (r == 0 && g == 0 && b == 0);
+      bool is_white = (r == 31 && g == 63 && b == 31);
+
+      if (!is_black && !is_white) {
+        // 修改各通道最低位
+        r = (r & ~0x1) | bit_val;
+        g = (g & ~0x1) | bit_val;
+        b = (b & ~0x1) | bit_val;
+
+        // 重新组合像素值
+        *pixel_ptr = (r << 11) | (g << 5) | b;
+      }
+    }
+  } else if (type == GL_UNSIGNED_SHORT_4_4_4_4 && format == GL_RGBA) {
+    // 16位RGBA格式 (4-4-4-4)
+    for (int p = 0; p < total_pixels; p++) {
+      int pixel_index = p * bytes_per_pixel;
+      uint16_t* pixel_ptr = reinterpret_cast<uint16_t*>(data + pixel_index);
+      uint16_t pixel_value = *pixel_ptr;
+
+      // 计算当前像素应该使用哪个哈希值（循环使用哈希序列）
+      int seq_idx = p % seq_length;
+      uint8_t bit_val = hash_sequence[seq_idx];
+
+      // 提取各通道值
+      uint16_t r = (pixel_value >> 12) & 0xF;
+      uint16_t g = (pixel_value >> 8) & 0xF;
+      uint16_t b = (pixel_value >> 4) & 0xF;
+      uint16_t a = pixel_value & 0xF;
+
+      // 检查是否是纯黑色或纯白色或透明像素（这些像素不修改）
+      bool is_transparent = (a == 0);
+      bool is_black = (r == 0 && g == 0 && b == 0);
+      bool is_white = (r == 15 && g == 15 && b == 15);
+
+      if (!is_transparent && !is_black && !is_white) {
+        // 修改各通道最低位，Alpha不变
+        r = (r & ~0x1) | bit_val;
+        g = (g & ~0x1) | bit_val;
+        b = (b & ~0x1) | bit_val;
+
+        // 重新组合像素值
+        *pixel_ptr = (r << 12) | (g << 8) | (b << 4) | a;
+      }
+    }
+  } else if (type == GL_UNSIGNED_SHORT_5_5_5_1 && format == GL_RGBA) {
+    // 16位RGBA格式 (5-5-5-1)
+    for (int p = 0; p < total_pixels; p++) {
+      int pixel_index = p * bytes_per_pixel;
+      uint16_t* pixel_ptr = reinterpret_cast<uint16_t*>(data + pixel_index);
+      uint16_t pixel_value = *pixel_ptr;
+
+      // 计算当前像素应该使用哪个哈希值（循环使用哈希序列）
+      int seq_idx = p % seq_length;
+      uint8_t bit_val = hash_sequence[seq_idx];
+
+      // 提取各通道值
+      uint16_t r = (pixel_value >> 11) & 0x1F;
+      uint16_t g = (pixel_value >> 6) & 0x1F;
+      uint16_t b = (pixel_value >> 1) & 0x1F;
+      uint16_t a = pixel_value & 0x1;
+
+      // 检查是否是纯黑色或纯白色或透明像素（这些像素不修改）
+      bool is_transparent = (a == 0);
+      bool is_black = (r == 0 && g == 0 && b == 0);
+      bool is_white = (r == 31 && g == 31 && b == 31);
+
+      if (!is_transparent && !is_black && !is_white) {
+        // 修改各通道最低位，Alpha不变
+        r = (r & ~0x1) | bit_val;
+        g = (g & ~0x1) | bit_val;
+        b = (b & ~0x1) | bit_val;
+
+        // 重新组合像素值
+        *pixel_ptr = (r << 11) | (g << 6) | (b << 1) | a;
+      }
+    }
+  }
+}
+} // namespace
+
 void WebGLRenderingContextBase::readPixels(
     GLint x,
     GLint y,
@@ -5025,6 +5213,12 @@ void WebGLRenderingContextBase::ReadPixelsHelper(GLint x,
     }
     ContextGL()->ReadPixels(x, y, width, height, format, type, data);
 
+    // 检查是否需要修改像素数据
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (command_line->HasSwitch(switches::kFingerprint)) {
+      ModifyPixelData(data, width, height, format, type);
+    }
+
     if (IdentifiabilityStudySettings::Get()->ShouldSampleType(
             IdentifiableSurface::Type::kWebFeature)) {
       const auto& ukm_params = GetUkmParameters();
