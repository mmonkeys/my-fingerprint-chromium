diff --git a/third_party/blink/renderer/modules/webgl/BUILD.gn b/third_party/blink/renderer/modules/webgl/BUILD.gn
index 29cc583ada..8da7bc9033 100644
--- a/third_party/blink/renderer/modules/webgl/BUILD.gn
+++ b/third_party/blink/renderer/modules/webgl/BUILD.gn
@@ -47,6 +47,10 @@ blink_modules_sources("webgl") {
     "ext_texture_norm_16.cc",
     "ext_texture_norm_16.h",
     "gl_string_query.h",
+    "gpu_info.cc",
+    "gpu_info.h",
+    "gpu_fingerprint.cc",
+    "gpu_fingerprint.h",
     "khr_parallel_shader_compile.cc",
     "khr_parallel_shader_compile.h",
     "nv_shader_noperspective_interpolation.cc",
diff --git a/third_party/blink/renderer/modules/webgl/gpu_fingerprint.cc b/third_party/blink/renderer/modules/webgl/gpu_fingerprint.cc
new file mode 100644
index 0000000000..b8b588599a
--- /dev/null
+++ b/third_party/blink/renderer/modules/webgl/gpu_fingerprint.cc
@@ -0,0 +1,83 @@
+#include "third_party/blink/renderer/modules/webgl/gpu_fingerprint.h"
+
+#include "base/command_line.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_util.h"
+#include "components/ungoogled/ungoogled_switches.h"
+#include "third_party/blink/renderer/modules/webgl/gpu_info.h"
+
+// GPU deviceID信息可以在这里查询
+// 570.144是驱动号，替换成最新的驱动号
+// https://download.nvidia.com/XFree86/Linux-x86_64/570.144/README/supportedchips.html
+// https://deviceandbrowserinfo.com/data/fingerprints/attribute/webGLRenderer
+// https://devicehunt.com/view/type/pci/vendor/10DE
+
+namespace blink {
+
+namespace {
+
+// Returns the appropriate GL_VENDOR string based on platform
+std::string GetGLVendorString(const std::string& platform) {
+  if (platform == "macos") {
+    return "Google Inc. (Apple)";
+  } else if (platform == "linux") {
+    return "Google Inc. (NVIDIA Corporation)";
+  } else {
+    // Windows
+    return "Google Inc. (NVIDIA)";
+  }
+}
+
+// Returns a GL_RENDERER string based on platform and fingerprint
+std::string GetGLRendererString(const std::string& platform, uint32_t fingerprint) {
+  if (platform == "macos") {
+    // Use helper function to get macOS GPU string
+    return GetMacosGpuString(fingerprint % kMacosGpuModelCount);
+  } else if (platform == "linux") {
+    // For Linux, get the basic GPU model but format for Linux
+    size_t model_index = fingerprint % GetGpuCount();
+    // Get the Windows GPU info to extract the model name
+    const GpuInfo& gpu_info = GetGpuInfo(model_index);
+    // Format for Linux (no device ID, different suffix)
+    return GetLinuxGpuString(gpu_info.model_name);
+  } else {
+    // Default to Windows format
+    return GetGpuInfo(fingerprint % GetGpuCount()).renderer_string;
+  }
+}
+
+}  // namespace
+
+// Public functions that will be used in WebGL code
+std::string GetGLVendorStringForFingerprint() {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  std::string platform = "windows";  // Default platform
+
+  if (command_line->HasSwitch(switches::kFingerprintPlatform)) {
+    platform = base::ToLowerASCII(
+        command_line->GetSwitchValueASCII(switches::kFingerprintPlatform));
+  }
+
+  return GetGLVendorString(platform);
+}
+
+std::string GetGLRendererStringForFingerprint() {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  std::string platform = "windows";  // Default platform
+  uint32_t fingerprint = 0;  // Default fingerprint
+
+  if (command_line->HasSwitch(switches::kFingerprintPlatform)) {
+    platform = base::ToLowerASCII(
+        command_line->GetSwitchValueASCII(switches::kFingerprintPlatform));
+  }
+
+  if (command_line->HasSwitch(switches::kFingerprint)) {
+    std::string fingerprint_str =
+        command_line->GetSwitchValueASCII(switches::kFingerprint);
+    base::StringToUint(fingerprint_str, &fingerprint);
+  }
+
+  return GetGLRendererString(platform, fingerprint);
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/webgl/gpu_fingerprint.h b/third_party/blink/renderer/modules/webgl/gpu_fingerprint.h
new file mode 100644
index 0000000000..c516e61b92
--- /dev/null
+++ b/third_party/blink/renderer/modules/webgl/gpu_fingerprint.h
@@ -0,0 +1,16 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_FINGERPRINT_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_FINGERPRINT_H_
+
+#include <string>
+
+namespace blink {
+
+// Returns the GL_VENDOR string based on platform and fingerprint
+std::string GetGLVendorStringForFingerprint();
+
+// Returns the GL_RENDERER string based on platform and fingerprint
+std::string GetGLRendererStringForFingerprint();
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_FINGERPRINT_H_
diff --git a/third_party/blink/renderer/modules/webgl/gpu_info.cc b/third_party/blink/renderer/modules/webgl/gpu_info.cc
new file mode 100644
index 0000000000..a3b78aaa43
--- /dev/null
+++ b/third_party/blink/renderer/modules/webgl/gpu_info.cc
@@ -0,0 +1,177 @@
+#include "third_party/blink/renderer/modules/webgl/gpu_info.h"
+
+#include "base/strings/stringprintf.h"
+
+namespace blink {
+
+// Common GPU suffix strings
+const char* kWindowsGpuSuffix = "Direct3D11 vs_5_0 ps_5_0, D3D11";
+const char* kLinuxGpuSuffix = "/PCIe/SSE2, OpenGL 4.5.0";
+
+// GPU Vendor strings by platform
+const char* kWindowsVendorString = "NVIDIA";  // Windows vendor in renderer
+const char* kLinuxVendorString = "NVIDIA Corporation";  // Linux vendor in renderer
+
+// MacOS GPU models
+const char* kMacosGpuModels[] = {
+  "M1",
+  "M1 Pro",
+  "M2",
+  "M2 Max",
+  "M2 Pro",
+  "M3",
+  "M3 Max",
+  "M3 Pro",
+  "M4",
+  "M4 Max",
+  "M4 Pro"
+};
+
+const size_t kMacosGpuModelCount = sizeof(kMacosGpuModels) / sizeof(kMacosGpuModels[0]);
+
+// Windows/Linux GPU models - shared between platforms
+const GpuModelInfo kGpuModels[] = {
+  {"GeForce RTX 3050", "0x00002507"},
+  {"GeForce RTX 3050", "0x00002582"},
+  {"GeForce RTX 3050 6GB Laptop GPU", "0x000025EC"},
+  {"GeForce RTX 3050 Laptop GPU", "0x000025A2"},
+  {"GeForce RTX 3050 Ti Laptop GPU", "0x000025A0"},
+  {"GeForce RTX 3060", "0x00002487"},
+  {"GeForce RTX 3060", "0x00002503"},
+  {"GeForce RTX 3060", "0x00002504"},
+  {"GeForce RTX 3060 Laptop GPU", "0x00002520"},
+  {"GeForce RTX 3060 Laptop GPU", "0x00002560"},
+  {"GeForce RTX 3060 Ti", "0x00002486"},
+  {"GeForce RTX 3060 Ti", "0x00002489"},
+  {"GeForce RTX 3060 Ti", "0x000024C9"},
+  {"GeForce RTX 3070", "0x00002484"},
+  {"GeForce RTX 3070", "0x00002488"},
+  {"GeForce RTX 3070 Ti", "0x00002482"},
+  {"GeForce RTX 3070 Ti Laptop GPU", "0x000024A0"},
+  {"GeForce RTX 3080", "0x00002206"},
+  {"GeForce RTX 3080", "0x0000220A"},
+  {"GeForce RTX 3080", "0x00002216"},
+  {"GeForce RTX 3080 Laptop GPU", "0x0000249C"},
+  {"GeForce RTX 3080 Laptop GPU", "0x000024DC"},
+  {"GeForce RTX 3080 Ti", "0x00002208"},
+  {"GeForce RTX 3080 Ti Laptop GPU", "0x00002420"},
+  {"GeForce RTX 3080 Ti Laptop GPU", "0x00002460"},
+  {"GeForce RTX 3090", "0x00002204"},
+  {"GeForce RTX 3090 Ti", "0x00002203"},
+  {"GeForce RTX 4050 Laptop GPU", "0x000028A1"},
+  {"GeForce RTX 4050 Laptop GPU", "0x000028E1"},
+  {"GeForce RTX 4060", "0x00002882"},
+  {"GeForce RTX 4060 Laptop GPU", "0x000028A0"},
+  {"GeForce RTX 4060 Laptop GPU", "0x000028E0"},
+  {"GeForce RTX 4060 Ti", "0x00002803"},
+  {"GeForce RTX 4060 Ti", "0x00002805"},
+  {"GeForce RTX 4070", "0x00002786"},
+  {"GeForce RTX 4070 Laptop GPU", "0x00002820"},
+  {"GeForce RTX 4070 Laptop GPU", "0x00002860"},
+  {"GeForce RTX 4070 SUPER", "0x00002783"},
+  {"GeForce RTX 4070 Ti", "0x00002782"},
+  {"GeForce RTX 4070 Ti SUPER", "0x00002705"},
+  {"GeForce RTX 4080", "0x00002704"},
+  {"GeForce RTX 4080 Laptop GPU", "0x000027A0"},
+  {"GeForce RTX 4080 Laptop GPU", "0x000027E0"},
+  {"GeForce RTX 4080 SUPER", "0x00002702"},
+  {"GeForce RTX 4090", "0x00002684"},
+  {"GeForce RTX 4090 Laptop GPU", "0x00002717"},
+  {"GeForce RTX 4090 Laptop GPU", "0x00002757"},
+  {"GeForce RTX 5070", "0x00002F04"},
+  {"GeForce RTX 5070 Ti", "0x00002C05"},
+  {"GeForce RTX 5070 Ti Laptop GPU", "0x00002F18"},
+  {"GeForce RTX 5070 Ti Laptop GPU", "0x00002F58"},
+  {"GeForce RTX 5080", "0x00002C02"},
+  {"GeForce RTX 5080 Laptop GPU", "0x00002C19"},
+  {"GeForce RTX 5080 Laptop GPU", "0x00002C59"},
+  {"GeForce RTX 5090", "0x00002B85"},
+  {"GeForce RTX 5090 Laptop GPU", "0x00002C18"},
+  {"GeForce RTX 5090 Laptop GPU", "0x00002C58"},
+};
+
+const size_t kGpuModelCount = sizeof(kGpuModels) / sizeof(kGpuModels[0]);
+
+// Generate full Windows GPU info on demand
+GpuInfo GetWindowsGpuInfo(size_t index) {
+  if (index >= kGpuModelCount) {
+    // Default to last one (RTX 4090) if out of bounds
+    index = kGpuModelCount - 1;
+  }
+
+  const GpuModelInfo& model = kGpuModels[index];
+  GpuInfo info;
+  info.model_name = model.model_name;
+  info.device_id = model.device_id;
+
+  // Build the Windows renderer string
+  std::string device_id_part = (model.device_id && model.device_id[0]) ?
+    " (" + std::string(model.device_id) + ")" : "";
+
+  info.renderer_string = "ANGLE (" + std::string(kWindowsVendorString) +
+                         ", NVIDIA " + info.model_name +
+                         device_id_part + " " + kWindowsGpuSuffix + ")";
+
+  return info;
+}
+
+// All Windows GPU info list - generated from kGpuModels
+std::vector<GpuInfo> GetAllWindowsGpuInfo() {
+  std::vector<GpuInfo> result;
+  result.reserve(kGpuModelCount);
+
+  for (size_t i = 0; i < kGpuModelCount; ++i) {
+    result.push_back(GetWindowsGpuInfo(i));
+  }
+
+  return result;
+}
+
+// Lazy-initialized list of Windows GPU info
+const std::vector<GpuInfo>& GetWindowsGpuInfoList() {
+  static const std::vector<GpuInfo>* windows_gpu_info = nullptr;
+  if (!windows_gpu_info) {
+    windows_gpu_info = new std::vector<GpuInfo>(GetAllWindowsGpuInfo());
+  }
+  return *windows_gpu_info;
+}
+
+// Implementation of the functions declared in the header
+size_t GetGpuCount() {
+  return kGpuModelCount;
+}
+
+const GpuInfo& GetGpuInfo(size_t index) {
+  // Use the Windows GPU info list
+  const std::vector<GpuInfo>& windows_list = GetWindowsGpuInfoList();
+
+  // Ensure index is in bounds
+  if (index >= windows_list.size()) {
+    return windows_list.back();
+  }
+
+  return windows_list[index];
+}
+
+// Helper function to get a macOS GPU model string
+std::string GetMacosGpuString(size_t index) {
+  if (index >= kMacosGpuModelCount) {
+    // Default to M3 if out of bounds
+    index = kMacosGpuModelCount - 1;  // Index of M3 in the array
+  }
+
+  return base::StringPrintf("ANGLE (Apple, ANGLE Metal Renderer: Apple %s, Unspecified Version)",
+                         kMacosGpuModels[index]);
+}
+
+// Helper function to get a Linux GPU renderer string
+std::string GetLinuxGpuString(const std::string& model_name) {
+  // Note the difference: no device ID and no space before /PCIe
+  // Also using the Linux-specific vendor string
+  return base::StringPrintf("ANGLE (%s, NVIDIA %s%s)",
+                         kLinuxVendorString,
+                         model_name.c_str(),
+                         kLinuxGpuSuffix);
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/webgl/gpu_info.h b/third_party/blink/renderer/modules/webgl/gpu_info.h
new file mode 100644
index 0000000000..a72def0c5a
--- /dev/null
+++ b/third_party/blink/renderer/modules/webgl/gpu_info.h
@@ -0,0 +1,54 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_INFO_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_INFO_H_
+
+#include <string>
+#include <vector>
+
+namespace blink {
+
+// Structure to hold GPU information
+struct GpuInfo {
+  std::string model_name;
+  std::string device_id;
+  std::string renderer_string;
+};
+
+// Structure for basic GPU model info
+struct GpuModelInfo {
+  const char* model_name;
+  const char* device_id;  // Only used for Windows
+};
+
+// MacOS GPU models - can be expanded in the future
+extern const char* kMacosGpuModels[];
+extern const size_t kMacosGpuModelCount;
+
+// GPU Vendor strings
+extern const char* kWindowsVendorString;  // For Windows renderer
+extern const char* kLinuxVendorString;    // For Linux renderer
+
+// Platform-specific suffix strings
+extern const char* kWindowsGpuSuffix;
+extern const char* kLinuxGpuSuffix;
+
+// Returns the number of available GPUs in our database
+size_t GetGpuCount();
+
+// Returns GPU info for a given index
+const GpuInfo& GetGpuInfo(size_t index);
+
+// Helper function to get a macOS GPU model string
+std::string GetMacosGpuString(size_t index);
+
+// Helper function to get a Linux GPU renderer string
+std::string GetLinuxGpuString(const std::string& model_name);
+
+// Generate Windows GPU info for a specific index
+GpuInfo GetWindowsGpuInfo(size_t index);
+
+// Access to all Windows GPU info
+const std::vector<GpuInfo>& GetWindowsGpuInfoList();
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_WEBGL_GPU_INFO_H_
diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
index 4a52c7580d..1645e092a6 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -91,6 +91,7 @@
 #include "third_party/blink/renderer/modules/webgl/ext_shader_texture_lod.h"
 #include "third_party/blink/renderer/modules/webgl/ext_texture_filter_anisotropic.h"
 #include "third_party/blink/renderer/modules/webgl/gl_string_query.h"
+#include "third_party/blink/renderer/modules/webgl/gpu_fingerprint.h"
 #include "third_party/blink/renderer/modules/webgl/oes_element_index_uint.h"
 #include "third_party/blink/renderer/modules/webgl/oes_standard_derivatives.h"
 #include "third_party/blink/renderer/modules/webgl/oes_texture_float.h"
@@ -3861,10 +3862,8 @@ ScriptValue WebGLRenderingContextBase::getParameter(ScriptState* script_state,
               pname, IdentifiabilityBenignStringToken(
                          String(ContextGL()->GetString(GL_RENDERER))));
         }
-        if (base::FeatureList::IsEnabled(blink::features::kSpoofWebGLInfo))
-          return WebGLAny(script_state, String(blink::features::kSpoofWebGLRendererParam.Get()));
-        return WebGLAny(script_state,
-                        String(ContextGL()->GetString(GL_RENDERER)));
+
+        return WebGLAny(script_state, String(GetGLRendererStringForFingerprint()));
       }
       SynthesizeGLError(
           GL_INVALID_ENUM, "getParameter",
@@ -3878,10 +3877,7 @@ ScriptValue WebGLRenderingContextBase::getParameter(ScriptState* script_state,
               pname, IdentifiabilityBenignStringToken(
                          String(ContextGL()->GetString(GL_VENDOR))));
         }
-        if (base::FeatureList::IsEnabled(blink::features::kSpoofWebGLInfo))
-          return WebGLAny(script_state, String(blink::features::kSpoofWebGLVendorParam.Get()));
-        return WebGLAny(script_state,
-                        String(ContextGL()->GetString(GL_VENDOR)));
+        return WebGLAny(script_state, String(GetGLVendorStringForFingerprint()));
       }
       SynthesizeGLError(
           GL_INVALID_ENUM, "getParameter",

