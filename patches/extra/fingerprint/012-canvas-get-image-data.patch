diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
index ce4248b1b8..a661183470 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
@@ -26,6 +26,7 @@
 #include "base/check.h"
 #include "base/check_deref.h"
 #include "base/check_op.h"
+#include "base/command_line.h"
 #include "base/compiler_specific.h"
 #include "base/containers/span.h"
 #include "base/feature_list.h"
@@ -45,6 +46,7 @@
 #include "cc/paint/paint_image.h"
 #include "cc/paint/record_paint_canvas.h"
 #include "cc/paint/refcounted_buffer.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "components/viz/common/resources/shared_image_format_utils.h"
 #include "gpu/command_buffer/common/shared_image_usage.h"
 #include "gpu/command_buffer/common/sync_token.h"
@@ -2967,7 +2969,9 @@ ImageData* BaseRenderingContext2D::getImageDataInternal(
           snapshot->PaintImageForCurrentFrame().GetSkImageInfo().bounds();
       DCHECK(!bounds.intersect(SkIRect::MakeXYWH(sx, sy, sw, sh)));
     }
-    if (read_pixels_successful && RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (read_pixels_successful && command_line->HasSwitch(switches::kFingerprint)) {
       StaticBitmapImage::ShuffleSubchannelColorData(image_data_pixmap.addr(), image_data_pixmap.info(), sx, sy);
     }
   }
@@ -3777,7 +3781,8 @@ TextMetrics* BaseRenderingContext2D::measureText(const String& text) {
           : nullptr);
 
   // Scale text metrics if enabled
-  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     if (HostAsOffscreenCanvas()) {
       if (auto* window = DynamicTo<LocalDOMWindow>(GetTopExecutionContext())) {
         if (window->GetFrame() && window->GetFrame()->GetDocument())
diff --git a/third_party/blink/renderer/platform/graphics/image_data_buffer.cc b/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
index da15658237..f2f205831b 100644
--- a/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
+++ b/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
@@ -32,10 +32,12 @@
 
 #include "third_party/blink/renderer/platform/graphics/image_data_buffer.h"
 
+#include "base/command_line.h"
 #include "base/compiler_specific.h"
 #include "base/memory/ptr_util.h"
 #include "base/rand_util.h"
 #include "base/logging.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/renderer/platform/image-encoders/image_encoder.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/wtf/text/base64.h"
@@ -143,7 +145,8 @@ bool ImageDataBuffer::EncodeImageInternal(const ImageEncodingMimeType mime_type,
                                           const SkPixmap& pixmap) const {
   DCHECK(is_valid_);
 
-  if (RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     // shuffle subchannel color data within the pixmap
     StaticBitmapImage::ShuffleSubchannelColorData(pixmap_.writable_addr(), pixmap_.info(), 0, 0);
   }
diff --git a/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc b/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
index 4e1044093e..45686d3ed6 100644
--- a/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
+++ b/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
@@ -4,9 +4,11 @@
 
 #include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 
+#include "base/command_line.h"
 #include "base/rand_util.h"
 #include "base/logging.h"
 #include "base/numerics/checked_math.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "third_party/blink/renderer/platform/graphics/accelerated_static_bitmap_image.h"
 #include "third_party/blink/renderer/platform/graphics/graphics_context.h"
@@ -124,6 +126,8 @@ void StaticBitmapImage::DrawHelper(cc::PaintCanvas* canvas,
 
 #define writable_addr(T, p, stride, x, y) (T*)((const char *)p + y * stride + x * sizeof(T))
 
+
+
 void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkImageInfo& info, int srcX, int srcY) {
   auto w = info.width() - srcX, h = info.height() - srcY;
 
@@ -132,8 +136,11 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
     return;
   }
 
-  // generate the first random number here
-  double shuffleX = base::RandDouble();
+  std::string seed_str = "0";
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
+      seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+  }
 
   // cap maximum pixels to change
   auto pixels = (w + h) / 128;
@@ -148,30 +155,36 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
 
   DLOG(INFO) << "BRM: ShuffleSubchannelColorData() w=" << w << " h=" << h << " colorType=" << colorType << " fRowBytes=" << fRowBytes;
 
-  // second random number (for y/height)
-  double shuffleY = base::RandDouble();
-
-  // calculate random coordinates using bisection
-  auto currentW = w, currentH = h;
-  for(;pixels >= 0; pixels--) {
-    int x = currentW * shuffleX, y = currentH * shuffleY;
-
-    // calculate randomisation amounts for each RGB component
-    uint8_t shuffleR = base::RandInt(0, 4);
-    uint8_t shuffleG = (shuffleR + x) % 4;
-    uint8_t shuffleB = (shuffleG + y) % 4;
-
-    // manipulate pixel data to slightly change the R, G, B components
+  // 直接使用固定的位置而不是随机位置
+  for(int i = 0; i < pixels; i++) {
+    // 平均分布位置
+    int x = w / (pixels + 1) * (i + 1);
+    int y = h / (pixels + 1) * (i + 1);
+
+    // 为当前像素位置和种子组合生成三个不同的哈希值，每个通道使用一个
+    std::string pixel_key_base = seed_str + "_x" + std::to_string(x) + "_y" + std::to_string(y);
+    // 为每个RGB通道生成不同的哈希值
+    std::string pixel_key_r = pixel_key_base + "_r";
+    std::string pixel_key_g = pixel_key_base + "_g";
+    std::string pixel_key_b = pixel_key_base + "_b";
+    
+    // 为每个通道生成0-3的值，用于设置低2位
+    uint8_t shuffleR = std::hash<std::string>{}(pixel_key_r) % 4;
+    uint8_t shuffleG = std::hash<std::string>{}(pixel_key_g) % 4;
+    uint8_t shuffleB = std::hash<std::string>{}(pixel_key_b) % 4;
+
+    // 操作像素数据，对R、G、B分量进行细微修改
     switch (colorType) {
       case kAlpha_8_SkColorType:
       {
          auto *pixel = writable_addr(uint8_t, addr, fRowBytes, x, y);
          auto r = SkColorGetR(*pixel), g = SkColorGetG(*pixel), b = SkColorGetB(*pixel), a = SkColorGetA(*pixel);
 
-         r = shuffleComponent(r, UINT8_MAX-1, shuffleR);
-         g = shuffleComponent(g, UINT8_MAX-1, shuffleG);
-         b = shuffleComponent(b, UINT8_MAX-1, shuffleB);
-         // alpha is left unchanged
+         // 避免改变0和255
+         if (r > 0 && r < UINT8_MAX) r = (r & ~0x3) | shuffleR;
+         if (g > 0 && g < UINT8_MAX) g = (g & ~0x3) | shuffleG;
+         if (b > 0 && b < UINT8_MAX) b = (b & ~0x3) | shuffleB;
+         // alpha不变
 
          *pixel = SkColorSetARGB(a, r, g, b);
       }
@@ -179,19 +192,21 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
       case kGray_8_SkColorType:
       {
          auto *pixel = writable_addr(uint8_t, addr, fRowBytes, x, y);
-         *pixel = shuffleComponent(*pixel, UINT8_MAX-1, shuffleB);
+         // 避免改变0和255
+         if (*pixel > 0 && *pixel < UINT8_MAX) *pixel = (*pixel & ~0x3) | shuffleB;
       }
       break;
       case kRGB_565_SkColorType:
       {
          auto *pixel = writable_addr(uint16_t, addr, fRowBytes, x, y);
-         unsigned    r = SkPacked16ToR32(*pixel);
-         unsigned    g = SkPacked16ToG32(*pixel);
-         unsigned    b = SkPacked16ToB32(*pixel);
+         unsigned r = SkPacked16ToR32(*pixel);
+         unsigned g = SkPacked16ToG32(*pixel);
+         unsigned b = SkPacked16ToB32(*pixel);
 
-         r = shuffleComponent(r, 31, shuffleR);
-         g = shuffleComponent(g, 63, shuffleG);
-         b = shuffleComponent(b, 31, shuffleB);
+         // 避免改变最小值和最大值
+         if (r > 0 && r < 31) r = (r & ~0x3) | (shuffleR & 0x3);
+         if (g > 0 && g < 63) g = (g & ~0x3) | (shuffleG & 0x3);
+         if (b > 0 && b < 31) b = (b & ~0x3) | (shuffleB & 0x3);
 
          unsigned r16 = (r & SK_R16_MASK) << SK_R16_SHIFT;
          unsigned g16 = (g & SK_G16_MASK) << SK_G16_SHIFT;
@@ -205,10 +220,11 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
          auto *pixel = writable_addr(uint16_t, addr, fRowBytes, x, y);
          auto a = SkGetPackedA4444(*pixel), r = SkGetPackedR4444(*pixel), g = SkGetPackedG4444(*pixel), b = SkGetPackedB4444(*pixel);
 
-         r = shuffleComponent(r, 15, shuffleR);
-         g = shuffleComponent(g, 15, shuffleG);
-         b = shuffleComponent(b, 15, shuffleB);
-         // alpha is left unchanged
+         // 避免改变0和15
+         if (r > 0 && r < 15) r = (r & ~0x3) | (shuffleR & 0x3);
+         if (g > 0 && g < 15) g = (g & ~0x3) | (shuffleG & 0x3);
+         if (b > 0 && b < 15) b = (b & ~0x3) | (shuffleB & 0x3);
+         // alpha不变
 
          unsigned a4 = (a & 0xF) << SK_A4444_SHIFT;
          unsigned r4 = (r & 0xF) << SK_R4444_SHIFT;
@@ -223,10 +239,11 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
          auto *pixel = writable_addr(uint32_t, addr, fRowBytes, x, y);
          auto a = SkGetPackedA32(*pixel), r = SkGetPackedR32(*pixel), g = SkGetPackedG32(*pixel), b = SkGetPackedB32(*pixel);
 
-         r = shuffleComponent(r, UINT8_MAX-1, shuffleR);
-         g = shuffleComponent(g, UINT8_MAX-1, shuffleG);
-         b = shuffleComponent(b, UINT8_MAX-1, shuffleB);
-         // alpha is left unchanged
+         // 避免改变0和255
+         if (r > 0 && r < UINT8_MAX) r = (r & ~0x3) | shuffleR;
+         if (g > 0 && g < UINT8_MAX) g = (g & ~0x3) | shuffleG;
+         if (b > 0 && b < UINT8_MAX) b = (b & ~0x3) | shuffleB;
+         // alpha不变
 
          *pixel = (a << SK_A32_SHIFT) | (r << SK_R32_SHIFT) |
                   (g << SK_G32_SHIFT) | (b << SK_B32_SHIFT);
@@ -237,32 +254,21 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
          auto *pixel = writable_addr(uint32_t, addr, fRowBytes, x, y);
          auto a = SkGetPackedA32(*pixel), b = SkGetPackedR32(*pixel), g = SkGetPackedG32(*pixel), r = SkGetPackedB32(*pixel);
 
-         r = shuffleComponent(r, UINT8_MAX-1, shuffleR);
-         g = shuffleComponent(g, UINT8_MAX-1, shuffleG);
-         b = shuffleComponent(b, UINT8_MAX-1, shuffleB);
-         // alpha is left unchanged
+         // 避免改变0和255
+         if (r > 0 && r < UINT8_MAX) r = (r & ~0x3) | shuffleR;
+         if (g > 0 && g < UINT8_MAX) g = (g & ~0x3) | shuffleG;
+         if (b > 0 && b < UINT8_MAX) b = (b & ~0x3) | shuffleB;
+         // alpha不变
 
          *pixel = (a << SK_BGRA_A32_SHIFT) | (r << SK_BGRA_R32_SHIFT) |
                   (g << SK_BGRA_G32_SHIFT) | (b << SK_BGRA_B32_SHIFT);
       }
       break;
       default:
-         // the remaining formats are not expected to be used in Chromium
+         // 预计Chromium不会使用其他格式
          LOG(WARNING) << "BRM: ShuffleSubchannelColorData(): Ignoring pixel format";
          return;
     }
-
-    // keep bisecting or reset current width/height as needed
-    if (x == 0) {
-       currentW = w;
-    } else {
-       currentW = x;
-    }
-    if (y == 0) {
-       currentH = h;
-    } else {
-       currentH = y;
-    }
   }
 }
 
