diff --git a/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc b/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
index bdc481f3b9..84a77f8a11 100644
--- a/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
+++ b/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
@@ -33,6 +33,7 @@
 #include <memory>
 #include <utility>
 
+#include "base/command_line.h"
 #include "base/feature_list.h"
 #include "base/functional/callback_helpers.h"
 #include "base/location.h"
@@ -43,6 +44,7 @@
 #include "base/numerics/safe_conversions.h"
 #include "base/trace_event/trace_event.h"
 #include "base/trace_event/typed_macros.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "build/build_config.h"
 #include "services/metrics/public/cpp/ukm_recorder.h"
 #include "services/metrics/public/cpp/ukm_source_id.h"
@@ -98,6 +100,7 @@
 #include "third_party/blink/renderer/core/paint/paint_auto_dark_mode.h"
 #include "third_party/blink/renderer/core/paint/paint_layer.h"
 #include "third_party/blink/renderer/core/probe/core_probes.h"
+#include "third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h"
 #include "third_party/blink/renderer/platform/bindings/exception_state.h"
 #include "third_party/blink/renderer/platform/graphics/canvas_2d_layer_bridge.h"
 #include "third_party/blink/renderer/platform/graphics/canvas_resource_dispatcher.h"
@@ -1260,6 +1263,98 @@ scoped_refptr<StaticBitmapImage> HTMLCanvasElement::Snapshot(
   return image_bitmap;
 }
 
+namespace {
+// 创建修改后的图像
+scoped_refptr<StaticBitmapImage> CreateModifiedImage(
+    scoped_refptr<StaticBitmapImage> original_image) {
+  if (!original_image || !original_image->IsValid())
+    return nullptr;
+
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (! command_line->HasSwitch(switches::kFingerprint)) {
+    return nullptr;
+  }
+  std::string seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+
+  // 获取图像尺寸
+  gfx::Size size = original_image->GetSize();
+  int width = size.width();
+  int height = size.height();
+
+  // 跳过过小的图像
+  if (width < 8 || height < 8)
+    return nullptr;
+
+  // 创建用于读取像素的 SkImageInfo
+  SkImageInfo info = SkImageInfo::Make(
+      width, height,
+      kRGBA_8888_SkColorType,
+      original_image->GetAlphaType(),
+      original_image->GetSkColorSpace());
+
+  // 读取图像数据 - 注意这里我们使用非const对象
+  Vector<uint8_t> pixel_data = original_image->CopyImageData(info, false);
+
+  // 使用安全的大小比较
+  const size_t expected_size = static_cast<size_t>(width) *
+                               static_cast<size_t>(height) * 4;
+  if (pixel_data.size() < expected_size)
+    return nullptr;
+
+  // 生成一个基于种子的哈希序列
+  std::vector<uint8_t> hash_sequence;
+  const int seq_length = 64;
+  hash_sequence.reserve(seq_length);
+
+  for (int i = 0; i < seq_length; i++) {
+    std::string hash_key = seed_str + "_seq_" + std::to_string(i);
+    uint8_t hash_val = std::hash<std::string>{}(hash_key) % 2;  // 只生成0或1
+    hash_sequence.push_back(hash_val);
+  }
+
+  // 修改像素数据
+  uint8_t* pixels = pixel_data.data();
+  int total_pixels = width * height;
+
+  for (int p = 0; p < total_pixels; p++) {
+    int pixel_index = p * 4;  // RGBA 每像素4字节
+
+    // 计算当前像素应该使用哪个哈希值（循环使用哈希序列）
+    int seq_idx = p % seq_length;
+    uint8_t bit_val = hash_sequence[seq_idx];
+
+    // 检查是否是纯黑色或纯白色像素（这些像素不修改）
+    bool is_black = (pixels[pixel_index] == 0 &&
+                     pixels[pixel_index+1] == 0 &&
+                     pixels[pixel_index+2] == 0);
+    bool is_white = (pixels[pixel_index] == 255 &&
+                     pixels[pixel_index+1] == 255 &&
+                     pixels[pixel_index+2] == 255);
+    bool is_transparent = (pixels[pixel_index+3] == 0);
+
+    if (!is_black && !is_white && !is_transparent) {
+      // 修改RGB通道的最低位
+      for (int c = 0; c < 3; c++) {
+        pixels[pixel_index + c] = (pixels[pixel_index + c] & ~0x1) | bit_val;
+      }
+    }
+  }
+
+  // 创建新的图像数据
+  sk_sp<SkData> sk_data = SkData::MakeWithCopy(pixels, pixel_data.size());
+
+  // 创建新的StaticBitmapImage
+  scoped_refptr<StaticBitmapImage> new_image = StaticBitmapImage::Create(
+      sk_data, info, original_image->CurrentFrameOrientation());
+
+  // 保持原始图像的属性
+  new_image->SetOriginClean(original_image->OriginClean());
+
+  return new_image;
+}
+
+} // namespace
+
 String HTMLCanvasElement::ToDataURLInternal(
     const String& mime_type,
     const double& quality,
@@ -1275,6 +1370,29 @@ String HTMLCanvasElement::ToDataURLInternal(
   scoped_refptr<StaticBitmapImage> image_bitmap =
       Snapshot(FlushReason::kToDataURL, source_buffer);
   if (image_bitmap) {
+    // 检查是否启用指纹保护
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (command_line->HasSwitch(switches::kFingerprint)) {
+      const CanvasRenderingContext* context = RenderingContext();
+      // 检查是否是WebGL上下文
+      bool is_webgl_context = false;
+
+      if (context) {
+        is_webgl_context = (DynamicTo<WebGLRenderingContextBase>(context));
+      }
+
+      if (is_webgl_context) {
+        // 创建修改后的图像
+        scoped_refptr<StaticBitmapImage> modified_image = CreateModifiedImage(
+            image_bitmap);
+
+        // 如果成功创建了修改后的图像，使用它代替原图像
+        if (modified_image) {
+          image_bitmap = modified_image;
+        }
+      }
+    }
+
     std::unique_ptr<ImageDataBuffer> data_buffer =
         ImageDataBuffer::Create(image_bitmap);
     if (!data_buffer)
@@ -1344,6 +1462,7 @@ String HTMLCanvasElement::toDataURL(const String& mime_type,
   TRACE_EVENT_INSTANT(
       TRACE_DISABLED_BY_DEFAULT("identifiability.high_entropy_api"),
       "CanvasReadback", "data_url", data.Utf8());
+
   return data;
 }
 
