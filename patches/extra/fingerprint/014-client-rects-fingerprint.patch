diff --git a/third_party/blink/renderer/core/geometry/dom_rect.cc b/third_party/blink/renderer/core/geometry/dom_rect.cc
index 7bd7ac50d3..313d05f41b 100644
--- a/third_party/blink/renderer/core/geometry/dom_rect.cc
+++ b/third_party/blink/renderer/core/geometry/dom_rect.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "base/command_line.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/renderer/core/geometry/dom_rect.h"
 
 #include "third_party/blink/renderer/bindings/core/v8/v8_dom_rect_init.h"
@@ -16,9 +18,35 @@ DOMRect* DOMRect::Create(double x, double y, double width, double height) {
   return MakeGarbageCollected<DOMRect>(x, y, width, height);
 }
 
+//DOMRect* DOMRect::FromRectF(const gfx::RectF& rect) {
+//  return MakeGarbageCollected<DOMRect>(rect.x(), rect.y(), rect.width(),
+//                                       rect.height());
+//}
 DOMRect* DOMRect::FromRectF(const gfx::RectF& rect) {
-  return MakeGarbageCollected<DOMRect>(rect.x(), rect.y(), rect.width(),
-                                       rect.height());
+  float new_width = rect.width();
+  float new_height = rect.height();
+
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint) && rect.x() > 0) {
+    std::string seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+
+    // 为ClientRects使用专门的种子组合
+    std::string combined_rects_x = seed_str + "clientrects_noise_x";
+    std::string combined_rects_y = seed_str + "clientrects_noise_y";
+
+    uint32_t hash_val_x = std::hash<std::string>{}(combined_rects_x);
+    uint32_t hash_val_y = std::hash<std::string>{}(combined_rects_y);
+
+    // 映射到[-0.5, 0.5]范围
+    double norm_x = (hash_val_x & 0xFFFFFFFF) / 4294967295.0 - 0.5;
+    double norm_y = (hash_val_y & 0xFFFFFFFF) / 4294967295.0 - 0.5;
+
+    // 计算噪声，使用更小的范围
+    new_width = rect.width() + norm_x * 0.00001;
+    new_height = rect.height() + norm_y * 0.00001;
+  }
+
+  return MakeGarbageCollected<DOMRect>(rect.x(), rect.y(), new_width, new_height);
 }
 
 DOMRect* DOMRect::fromRect(const DOMRectInit* other) {
